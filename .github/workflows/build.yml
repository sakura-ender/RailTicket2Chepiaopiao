on:
  push:
    tags:
      - '*'

permissions:
  contents: write
  packages: write

env:
  APP_NAME: RailTicket2Chepiaopiao
  VERSION: ${{ github.ref_name }}

jobs:
  build_windows_linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-20.04]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build executable
        run: |
          pyinstaller --onefile main.py

      - name: Prepare artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir release\windows
          move dist\main.exe release\windows\${{ env.APP_NAME }}-${{ env.VERSION }}.exe
        shell: cmd

      - name: Prepare artifacts (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir -p release/linux
          mv dist/main release/linux/${{ env.APP_NAME }}-${{ env.VERSION }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-executable
          path: release/${{ runner.os == 'Windows' && 'windows' || 'linux' }}/

  build_macos:
    name: Build macOS Universal2 Binary
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        # 非源码安装的cffi库默认只支持当前设备架构
        # 这里卸载cffi库，通过源码安装，以同时支持arm64 + x86_64架构
        run: |
          pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          pip uninstall cffi
          pip install --no-cache-dir --no-binary=:all: cffi

      - name: Build executable
        run: |
          pyinstaller --onefile --windowed --target-arch universal2 main.py

      - name: Prepare artifacts
        run: |
          mkdir -p release/macos
          mv dist/main.app release/macos/${{ env.APP_NAME }}-${{ env.VERSION }}.app
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macOS-executable
          path: release/macos/

  release:
    needs:
      - build_windows_linux
      - build_macos
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: Windows-executable
          path: release/windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: Linux-executable
          path: release/linux

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macOS-executable
          path: release/macos

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/windows/${{ env.APP_NAME }}-${{ env.VERSION }}.exe
          asset_name: ${{ env.APP_NAME }}-${{ env.VERSION }}.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/linux/${{ env.APP_NAME }}-${{ env.VERSION }}
          asset_name: ${{ env.APP_NAME }}-${{ env.VERSION }}
          asset_content_type: application/octet-stream

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/macos/${{ env.APP_NAME }}-${{ env.VERSION }}.app
          asset_name: ${{ env.APP_NAME }}-${{ env.VERSION }}.app
          asset_content_type: application/octet-stream