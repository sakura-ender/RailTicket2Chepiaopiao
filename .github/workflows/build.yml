on:
  push:
    tags:
      - '*'

permissions:
  contents: write
  packages: write

env:
  APP_NAME: RailTicket2Chepiaopiao
  VERSION: ${{ github.ref_name }}

jobs:
  build_windows_linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-20.04]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build executable
        run: |
          pyinstaller --onefile main.py

      - name: Prepare artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir release\windows
          move dist\main.exe release\windows\${{ env.APP_NAME }}-${{ env.VERSION }}.exe
        shell: cmd

      - name: Prepare artifacts (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir -p release/linux
          mv dist/main release/linux/${{ env.APP_NAME }}-${{ env.VERSION }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-executable
          path: release/${{ runner.os == 'Windows' && 'windows' || 'linux' }}/

  build_x86_64:
    name: Build macOS x86_64 Binary
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rosetta 2
        run: |
          sudo softwareupdate --install-rosetta --agree-to-license || true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies for x86_64
        run: |
          arch -x86_64 pip install --upgrade pip
          arch -x86_64 pip install pyinstaller
          arch -x86_64 pip install -r requirements.txt

      - name: Build x86_64 executable
        run: |
          arch -x86_64 pyinstaller --windowed --name ${{ env.APP_NAME }}_macos_x86_64 main.py

      - name: Upload x86_64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos_x86_64_build
          path: dist/${{ env.APP_NAME }}_macos_x86_64.app/**

  build_arm64:
    name: Build macOS arm64 Binary
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies for arm64
        run: |
          pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build arm64 executable
        run: |
          pyinstaller --windowed --name ${{ env.APP_NAME }}_macos_arm64 main.py

      - name: Upload arm64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos_arm64_build
          path: dist/${{ env.APP_NAME }}_macos_arm64.app/**

  merge_binaries:
    name: Merge macOS Binaries into Universal
    runs-on: macos-latest
    needs:
      - build_x86_64
      - build_arm64
    steps:
      - name: Download x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: macos_x86_64_build
          path: x86_64_build/${{ env.APP_NAME }}_macos_x86_64.app

      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: macos_arm64_build
          path: arm64_build/${{ env.APP_NAME }}_macos_arm64.app

      - name: Merge executables using lipo
        run: |
          mkdir -p release/macos
          # 复制 x86_64 应用程序作为基础
          cp -R x86_64_build/${{ env.APP_NAME }}_macos_x86_64.app release/macos/${{ env.APP_NAME }}_macos_universal.app
          # 将 arm64 可执行文件复制到应用程序包中
          cp arm64_build/${{ env.APP_NAME }}_macos_arm64.app/Contents/MacOS/${{ env.APP_NAME }}_macos_arm64 \
            release/macos/${{ env.APP_NAME }}_macos_universal.app/Contents/MacOS/
          # 使用 lipo 合并二进制文件，生成通用可执行文件
          lipo -create \
            release/macos/${{ env.APP_NAME }}_macos_universal.app/Contents/MacOS/${{ env.APP_NAME }}_macos_x86_64 \
            release/macos/${{ env.APP_NAME }}_macos_universal.app/Contents/MacOS/${{ env.APP_NAME }}_macos_arm64 \
            -output release/macos/${{ env.APP_NAME }}_macos_universal.app/Contents/MacOS/${{ env.APP_NAME }}_macos_universal
          # 更新 Info.plist 中的可执行文件名
          /usr/libexec/PlistBuddy -c "Set :CFBundleExecutable ${{ env.APP_NAME }}_macos_universal" \
            release/macos/${{ env.APP_NAME }}_macos_universal.app/Contents/Info.plist
          # 删除架构特定的可执行文件
          rm -f release/macos/${{ env.APP_NAME }}_macos_universal.app/Contents/MacOS/${{ env.APP_NAME }}_macos_x86_64
          rm -f release/macos/${{ env.APP_NAME }}_macos_universal.app/Contents/MacOS/${{ env.APP_NAME }}_macos_arm64
          find release/macos/${{ env.APP_NAME }}_macos_universal.app -type f -exec chmod +x {} \;

      - name: Upload universal binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos_universal_build
          path: release/macos/

  compress_macos_app:
    name: Compress macOS app
    runs-on: macos-latest
    needs: merge_binaries
    steps:
      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos_universal_build
          path: release/macos

      - name: Compress macOS app
        run: |
          cd release/macos
          ditto -c -k --sequesterRsrc --keepParent --preserveHFSCompression ${{ env.APP_NAME }}_macos_universal.app ${{ env.APP_NAME }}-${{ env.VERSION }}.zip

      - name: Upload macOS Release Asset
        uses: actions/upload-artifact@v4
        with:
          name: macos_compressed_build
          path: release/macos/${{ env.APP_NAME }}-${{ env.VERSION }}.zip

  release:
    needs:
      - build_windows_linux
      - compress_macos_app
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: Windows-executable
          path: release/windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: Linux-executable
          path: release/linux

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos_compressed_build
          path: release/macos

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/windows/${{ env.APP_NAME }}-${{ env.VERSION }}.exe
          asset_name: ${{ env.APP_NAME }}-${{ env.VERSION }}.exe
          asset_content_type: application/octet-stream

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/linux/${{ env.APP_NAME }}-${{ env.VERSION }}
          asset_name: ${{ env.APP_NAME }}-${{ env.VERSION }}
          asset_content_type: application/octet-stream

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/macos/${{ env.APP_NAME }}-${{ env.VERSION }}.zip
          asset_name: ${{ env.APP_NAME }}-${{ env.VERSION }}.zip
          asset_content_type: application/zip